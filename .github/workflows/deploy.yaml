name: Deploy CloudFormation Stack

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    env:
      DOMAIN_URL: "sftp.combateafraude.com"
      ROUTE_53_HOSTEDZONEID: ""

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          # aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          # aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          # aws-region: us-east-1 # Substitua pela sua região
          role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/github-oidc-role
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ vars.AWS_REGION }}

      - name: Verify AWS Credentials in use
        run: |
          echo "Verificando identidade do usuário AWS..."
          aws sts get-caller-identity

      # - name: Deploy VPC Stack
      #   id: vpc
      #   uses: aws-actions/aws-cloudformation-github-deploy@v1
      #   with:
      #     stack-name: caf-sftp-vpc
      #     template: ./deployment/01-sftp-vpc.template.yaml
      #     capabilities: CAPABILITY_IAM
      #     no-fail-on-empty-changeset: true
      #     tags: |
      #       Project=caf-sftp
      #       Environment=development

      # - name: DefaultSecurityGroup Test
      #   run: |
      #     echo "${{ steps.vpc.outputs.DefaultSecurityGroup }}"

      - name: Deploy Test Stack
        id: test
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          stack-name: caf-sftp-vpc
          template: ./deployment/test.template.yaml
          capabilities: CAPABILITY_IAM
          no-fail-on-empty-changeset: true
          tags: |
            Project=caf-sftp 
            Environment=development

      - name: FakeOutput Test
        run: |
          echo "${{ steps.test.outputs.FakeOutput }}"
          echo "$DOMAIN_URL"

      # - name: Deploy COGNITO Stack
      #   uses: aws-actions/aws-cloudformation-github-deploy@v1
      #   with:
      #     stack-name: caf-sftp-cognito
      #     template: ./deployment/02-sftp-cognito.template.yaml
      #     capabilities: CAPABILITY_IAM
      #     no-fail-on-empty-changeset: true
      #     tags: |
      #       Project=caf-sftp
      #       Environment=development

      # TODO: AWSTransferForSFTPS3Bucket
      # - name: Deploy ENDPOINT Stack
      #   uses: aws-actions/aws-cloudformation-github-deploy@v1
      #   with:
      #     stack-name: caf-sftp-endpoint
      #     template: ./deployment/03-sftp-endpoint.template.yaml
      #     capabilities: CAPABILITY_IAM
      #     no-fail-on-empty-changeset: true
      #     parameter-overrides: >-
      #       AWSTransferForSFTPS3Bucket=,
      #       AWSTransferVPCSecGroup=${{ steps.vpc.outputs.DefaultSecurityGroup }},
      #     tags: |
      #       Project=caf-sftp
      #       Environment=development

      # - name: Deploy ECS Stack
      #   uses: aws-actions/aws-cloudformation-github-deploy@v1
      #   with:
      #     stack-name: caf-sftp-ecs
      #     template: ./deployment/04-sftp-ecs.template.yaml
      #     capabilities: CAPABILITY_IAM
      #     no-fail-on-empty-changeset: true
      #     parameter-overrides: >-
      #       HostedZoneId=$ROUTE_53_HOSTEDZONEID,
      #       RecordName=$DOMAIN_URL,
      #     tags: |
      #       Project=caf-sftp
      #       Environment=development

      # - name: Build Docker Image and Set Variables
      #   run: |
      #     chmod +x ./deployment/04a-build-docker-image.sh
      #     ./deployment/04a-build-docker-image.sh

      # - name: Deploy FARGATE Stack
      #   uses: aws-actions/aws-cloudformation-github-deploy@v1
      #   with:
      #     stack-name: caf-sftp-ecs
      #     template: ./deployment/05-sftp-fargate.template.yaml
      #     capabilities: CAPABILITY_IAM
      #     no-fail-on-empty-changeset: true
      #     tags: |
      #       Project=caf-sftp
      #       Environment=development

      # - name: Deploy FARGATE Stack
      #   uses: aws-actions/aws-cloudformation-github-deploy@v1
      #   with:
      #     stack-name: caf-sftp-ecs
      #     template: ./deployment/05-sftp-fargate.template.yaml
      #     capabilities: CAPABILITY_IAM
      #     no-fail-on-empty-changeset: true
      #     tags: |
      #       Project=caf-sftp
      #       Environment=development

      # - name: Deploy SECURITY HEADERS LAMBDA Stack
      #   id: securityheaders
      #   uses: aws-actions/aws-cloudformation-github-deploy@v1
      #   with:
      #     stack-name: caf-sftp-security-headers-lambda-edge
      #     template: ./deployment/06b-security-headers-lambda-edge.template.yaml
      #     capabilities: CAPABILITY_IAM
      #     no-fail-on-empty-changeset: true
      #     parameter-overrides: >-
      #       DomainName=$DOMAIN_URL,
      #     tags: |
      #       Project=caf-sftp
      #       Environment=development

      # - name: Deploy WEB CLIENT Stack
      #   uses: aws-actions/aws-cloudformation-github-deploy@v1
      #   with:
      #     stack-name: caf-sftp-web-client
      #     template: ./deployment/07-sftp-web-client.template.yaml
      #     capabilities: CAPABILITY_IAM
      #     no-fail-on-empty-changeset: true
      #     parameter-overrides: >-
      #       LambdaEdgeVersionARN=${{ steps.securityheaders.outputs.VersionedSecurityHeadersLambda }},
      #     tags: |
      #       Project=caf-sftp
      #       Environment=development

# # Setup env vars
# AWS_PROFILE=$1

# # Replace with your preferred domain name
# DOMAIN_NAME='REPLACE_ME_COMPANY_DOMAIN' # NOTE: example, 'mycompanydomain.com'

# # Create Cloudformation stack that creates Lambda@Edge function in US-East-1
# stack_name="caf-sftp-sec-hdr-stack-$(echo $RANDOM)"
# echo $stack_name

# # This template needs to be deployed in US-EAST-1 as Lambda@Edge functions are currently
# # required to be in US-EAST-1 region
# aws cloudformation create-stack --stack-name $stack_name --template-body file://06b-security-headers-lambda-edge.template --parameters ParameterKey=DomainName,ParameterValue=$DOMAIN_NAME \
#  --profile $AWS_PROFILE --region us-east-1 --capabilities CAPABILITY_IAM

# # Print the value of Lambda@Edge version, which will be need in Cloudfront distribution configuration next.
# lambda_edge_version=$(aws cloudformation describe-stacks --stack-name $stack_name --profile $AWS_PROFILE --region us-east-1 | grep OutputValue)
# while [ -z "$lambda_edge_version" ] ; do # check for null
#   lambda_edge_version=$(aws cloudformation describe-stacks --stack-name $stack_name --profile $AWS_PROFILE --region us-east-1 | grep OutputValue)
#   echo "Waiting for stack to complete its creation."
#   sleep 10
# done
# echo $lambda_edge_version

# run: |
#   STACK_NAME="caf-sftp-vpc"
#   TEMPLATE_FILE="./deployment/01-sftp-vpc.template.yaml"

#   # Verificar se a stack existe
#   stack_exists=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].StackName" --output text 2>/dev/null)

#   if [ "$stack_exists" == "$STACK_NAME" ]; then
#     # Se a stack existe, atualiza
#     echo "Stack $STACK_NAME existe. Atualizando..."
#     aws cloudformation update-stack --stack-name $STACK_NAME --template-body file://$TEMPLATE_FILE --tags Key=PROJECT,Value=caf-sftp Key=ENVIRONMENT,Value=development
#   else
#     # Se a stack não existe, cria
#     echo "Stack $STACK_NAME não existe. Criando..."
#     aws cloudformation create-stack --stack-name $STACK_NAME --template-body file://$TEMPLATE_FILE --tags Key=PROJECT,Value=caf-sftp Key=ENVIRONMENT,Value=development
#   fi
